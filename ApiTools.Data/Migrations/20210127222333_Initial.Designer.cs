// <auto-generated />
using System;
using ApiTools.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ApiTools.Data.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20210127222333_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("ApiTools.Domain.Data.Account", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("BlockedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36) CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("varchar(1024) CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(32)
                        .IsUnicode(true)
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4");

                    b.Property<string>("LastName")
                        .HasMaxLength(32)
                        .IsUnicode(true)
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(true)
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("PictureId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ProfileEmailId")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("RegisteredDate")
                        .HasColumnType("datetime(6)");

                    b.Property<ulong>("RoleId")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36) CHARACTER SET utf8mb4");

                    b.Property<byte>("ShowEmail")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte>("ShowName")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte>("ShowWebsite")
                        .HasColumnType("tinyint unsigned");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(true)
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("PictureId")
                        .IsUnique();

                    b.HasIndex("ProfileEmailId")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ApiTools.Domain.Data.AccountEmail", b =>
                {
                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<ulong?>("AccountId")
                        .HasColumnType("bigint unsigned");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint unsigned");

                    b.Property<bool>("Verified")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Email");

                    b.HasIndex("AccountId");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("ApiTools.Domain.Data.AccountInvite", b =>
                {
                    b.Property<Guid>("Token")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<ulong?>("AcceptorId")
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime>("Expire")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Invited")
                        .HasColumnType("datetime(6)");

                    b.Property<ulong?>("InviterId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("Token");

                    b.HasIndex("AcceptorId")
                        .IsUnique();

                    b.HasIndex("InviterId");

                    b.ToTable("Invites");
                });

            modelBuilder.Entity("ApiTools.Domain.Data.Album", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    b.Property<ulong?>("AccountId")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(48)
                        .HasColumnType("varchar(48) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("ApiTools.Domain.Data.AlbumLike", b =>
                {
                    b.Property<uint>("AlbumId")
                        .HasColumnType("int unsigned");

                    b.Property<ulong>("LikerId")
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Unliked")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("AlbumId", "LikerId");

                    b.HasIndex("LikerId");

                    b.ToTable("AlbumLikes");
                });

            modelBuilder.Entity("ApiTools.Domain.Data.Blog", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<ulong?>("CreatorId")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(48)
                        .IsUnicode(true)
                        .HasColumnType("varchar(48) CHARACTER SET utf8mb4");

                    b.Property<byte>("Visibility")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("ApiTools.Domain.Data.BlogPost", b =>
                {
                    b.Property<uint>("Id")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("BlogId")
                        .HasColumnType("int unsigned");

                    b.Property<ulong?>("AccountId")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(65535)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4");

                    b.Property<byte>("Visibility")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("Id", "BlogId");

                    b.HasIndex("AccountId");

                    b.HasIndex("BlogId");

                    b.ToTable("BlogPosts");
                });

            modelBuilder.Entity("ApiTools.Domain.Data.BlogRoleAccess", b =>
                {
                    b.Property<uint>("BlogId")
                        .HasColumnType("int unsigned");

                    b.Property<ulong>("RoleId")
                        .HasColumnType("bigint unsigned");

                    b.Property<byte>("Access")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("BlogId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("BlogRoleAccess");
                });

            modelBuilder.Entity("ApiTools.Domain.Data.BlogUserAccess", b =>
                {
                    b.Property<uint>("BlogId")
                        .HasColumnType("int unsigned");

                    b.Property<ulong>("AccountId")
                        .HasColumnType("bigint unsigned");

                    b.Property<byte>("Access")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("BlogId", "AccountId");

                    b.HasIndex("AccountId");

                    b.ToTable("BlogAccesses");
                });

            modelBuilder.Entity("ApiTools.Domain.Data.Comment", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong?>("AccountId")
                        .IsRequired()
                        .HasColumnType("bigint unsigned");

                    b.Property<uint?>("BlogPostBlogId")
                        .HasColumnType("int unsigned");

                    b.Property<uint?>("BlogPostId")
                        .HasColumnType("int unsigned");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("varchar(1024) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<ulong?>("TimelinePostAccountId")
                        .HasColumnType("bigint unsigned");

                    b.Property<uint?>("TimelinePostId")
                        .HasColumnType("int unsigned");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("BlogPostId", "BlogPostBlogId");

                    b.HasIndex("TimelinePostId", "TimelinePostAccountId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("ApiTools.Domain.Data.CommentReply", b =>
                {
                    b.Property<ulong>("CommentId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("ReplyId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("CommentId", "ReplyId");

                    b.HasIndex("ReplyId")
                        .IsUnique();

                    b.ToTable("CommentReplies");
                });

            modelBuilder.Entity("ApiTools.Domain.Data.JwtSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<ulong?>("AccountId")
                        .HasColumnType("bigint unsigned");

                    b.Property<byte>("Browser")
                        .HasColumnType("tinyint unsigned");

                    b.Property<DateTime?>("Expires")
                        .HasColumnType("datetime(6)");

                    b.Property<byte[]>("Ip")
                        .HasMaxLength(16)
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime>("Issued")
                        .HasColumnType("datetime(6)");

                    b.Property<byte[]>("LastIp")
                        .HasMaxLength(16)
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime?>("LastUse")
                        .HasColumnType("datetime(6)");

                    b.Property<byte>("Platform")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("sessions");
                });

            modelBuilder.Entity("ApiTools.Domain.Data.Picture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<uint?>("AlbumId")
                        .HasColumnType("int unsigned");

                    b.Property<byte>("State")
                        .HasColumnType("tinyint unsigned");

                    b.Property<DateTime?>("StateChanged")
                        .HasColumnType("datetime(6)");

                    b.Property<ulong?>("TimelinePostAccountId")
                        .HasColumnType("bigint unsigned");

                    b.Property<uint?>("TimelinePostId")
                        .HasColumnType("int unsigned");

                    b.Property<DateTime>("Uploaded")
                        .HasColumnType("datetime(6)");

                    b.Property<ulong?>("UploaderId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("UploaderId");

                    b.HasIndex("TimelinePostId", "TimelinePostAccountId");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("ApiTools.Domain.Data.PictureLike", b =>
                {
                    b.Property<Guid>("PictureId")
                        .HasColumnType("char(36)");

                    b.Property<ulong>("LikerId")
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Unliked")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("PictureId", "LikerId");

                    b.HasIndex("LikerId");

                    b.ToTable("PictureLikes");
                });

            modelBuilder.Entity("ApiTools.Domain.Data.Role", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36) CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

                    b.Property<ulong>("Targets")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1ul,
                            ConcurrencyStamp = "47fc8208-cd44-413c-9445-73693e06118e",
                            Description = "Default admin role",
                            Disabled = false,
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            Targets = 1000ul
                        });
                });

            modelBuilder.Entity("ApiTools.Domain.Data.RolePermission", b =>
                {
                    b.Property<ulong>("RoleId")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Permission")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<ulong?>("Target")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("RoleId", "Permission");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            RoleId = 1ul,
                            Permission = "*",
                            Target = 1000ul
                        });
                });

            modelBuilder.Entity("ApiTools.Domain.Data.TimelinePost", b =>
                {
                    b.Property<uint>("Id")
                        .HasColumnType("int unsigned");

                    b.Property<ulong?>("AccountId")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(65535)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4");

                    b.Property<byte>("Visibility")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("Id", "AccountId");

                    b.HasIndex("AccountId");

                    b.ToTable("TimelinePost");
                });

            modelBuilder.Entity("ApiTools.Domain.Data.TimelinePostLike", b =>
                {
                    b.Property<ulong>("AccountId")
                        .HasColumnType("bigint unsigned");

                    b.Property<uint>("PostId")
                        .HasColumnType("int unsigned");

                    b.Property<ulong>("LikerId")
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Unliked")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("AccountId", "PostId", "LikerId");

                    b.HasIndex("LikerId");

                    b.HasIndex("PostId", "AccountId");

                    b.ToTable("TimelinePostLike");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<ulong>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<ulong>("RoleId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<ulong>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<ulong>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<ulong>", b =>
                {
                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("RoleId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<ulong>", b =>
                {
                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ApiTools.Domain.Data.Account", b =>
                {
                    b.HasOne("ApiTools.Domain.Data.AccountEmail", "PrimaryEmail")
                        .WithOne()
                        .HasForeignKey("ApiTools.Domain.Data.Account", "Email")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApiTools.Domain.Data.Picture", "Picture")
                        .WithOne()
                        .HasForeignKey("ApiTools.Domain.Data.Account", "PictureId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ApiTools.Domain.Data.AccountEmail", "ProfileEmail")
                        .WithOne()
                        .HasForeignKey("ApiTools.Domain.Data.Account", "ProfileEmailId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApiTools.Domain.Data.Role", "Role")
                        .WithMany("Members")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Picture");

                    b.Navigation("PrimaryEmail");

                    b.Navigation("ProfileEmail");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ApiTools.Domain.Data.AccountEmail", b =>
                {
                    b.HasOne("ApiTools.Domain.Data.Account", "Account")
                        .WithMany("Emails")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Account");
                });

            modelBuilder.Entity("ApiTools.Domain.Data.AccountInvite", b =>
                {
                    b.HasOne("ApiTools.Domain.Data.Account", "Acceptor")
                        .WithOne("Invite")
                        .HasForeignKey("ApiTools.Domain.Data.AccountInvite", "AcceptorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApiTools.Domain.Data.Account", "Inviter")
                        .WithMany("Invites")
                        .HasForeignKey("InviterId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Acceptor");

                    b.Navigation("Inviter");
                });

            modelBuilder.Entity("ApiTools.Domain.Data.Album", b =>
                {
                    b.HasOne("ApiTools.Domain.Data.Account", "Account")
                        .WithMany("Albums")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Account");
                });

            modelBuilder.Entity("ApiTools.Domain.Data.AlbumLike", b =>
                {
                    b.HasOne("ApiTools.Domain.Data.Album", "Album")
                        .WithMany("Likes")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiTools.Domain.Data.Account", "Liker")
                        .WithMany()
                        .HasForeignKey("LikerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Liker");
                });

            modelBuilder.Entity("ApiTools.Domain.Data.Blog", b =>
                {
                    b.HasOne("ApiTools.Domain.Data.Account", "Creator")
                        .WithMany("Blogs")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("ApiTools.Domain.Data.BlogPost", b =>
                {
                    b.HasOne("ApiTools.Domain.Data.Account", "Account")
                        .WithMany("BlogPosts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ApiTools.Domain.Data.Blog", "Blog")
                        .WithMany("Posts")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("ApiTools.Domain.Data.BlogRoleAccess", b =>
                {
                    b.HasOne("ApiTools.Domain.Data.Blog", "Blog")
                        .WithMany("RoleAccess")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiTools.Domain.Data.Role", "Role")
                        .WithMany("BlogAccess")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ApiTools.Domain.Data.BlogUserAccess", b =>
                {
                    b.HasOne("ApiTools.Domain.Data.Account", "Account")
                        .WithMany("BlogAccess")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiTools.Domain.Data.Blog", "Blog")
                        .WithMany("UserAccess")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("ApiTools.Domain.Data.Comment", b =>
                {
                    b.HasOne("ApiTools.Domain.Data.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiTools.Domain.Data.BlogPost", null)
                        .WithMany("Comments")
                        .HasForeignKey("BlogPostId", "BlogPostBlogId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApiTools.Domain.Data.TimelinePost", null)
                        .WithMany("Comments")
                        .HasForeignKey("TimelinePostId", "TimelinePostAccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Account");
                });

            modelBuilder.Entity("ApiTools.Domain.Data.CommentReply", b =>
                {
                    b.HasOne("ApiTools.Domain.Data.Comment", "Comment")
                        .WithMany("Replies")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiTools.Domain.Data.Comment", "Reply")
                        .WithOne()
                        .HasForeignKey("ApiTools.Domain.Data.CommentReply", "ReplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Reply");
                });

            modelBuilder.Entity("ApiTools.Domain.Data.JwtSession", b =>
                {
                    b.HasOne("ApiTools.Domain.Data.Account", "Account")
                        .WithMany("Sessions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Account");
                });

            modelBuilder.Entity("ApiTools.Domain.Data.Picture", b =>
                {
                    b.HasOne("ApiTools.Domain.Data.Album", null)
                        .WithMany("Pictures")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApiTools.Domain.Data.Account", "Uploader")
                        .WithMany()
                        .HasForeignKey("UploaderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ApiTools.Domain.Data.TimelinePost", null)
                        .WithMany("Pictures")
                        .HasForeignKey("TimelinePostId", "TimelinePostAccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Uploader");
                });

            modelBuilder.Entity("ApiTools.Domain.Data.PictureLike", b =>
                {
                    b.HasOne("ApiTools.Domain.Data.Account", "Liker")
                        .WithMany()
                        .HasForeignKey("LikerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiTools.Domain.Data.Picture", "Picture")
                        .WithMany("Likes")
                        .HasForeignKey("PictureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Liker");

                    b.Navigation("Picture");
                });

            modelBuilder.Entity("ApiTools.Domain.Data.RolePermission", b =>
                {
                    b.HasOne("ApiTools.Domain.Data.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ApiTools.Domain.Data.TimelinePost", b =>
                {
                    b.HasOne("ApiTools.Domain.Data.Account", "Account")
                        .WithMany("Posts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("ApiTools.Domain.Data.TimelinePostLike", b =>
                {
                    b.HasOne("ApiTools.Domain.Data.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiTools.Domain.Data.Account", "Liker")
                        .WithMany()
                        .HasForeignKey("LikerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiTools.Domain.Data.TimelinePost", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostId", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Liker");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<ulong>", b =>
                {
                    b.HasOne("ApiTools.Domain.Data.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<ulong>", b =>
                {
                    b.HasOne("ApiTools.Domain.Data.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<ulong>", b =>
                {
                    b.HasOne("ApiTools.Domain.Data.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<ulong>", b =>
                {
                    b.HasOne("ApiTools.Domain.Data.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiTools.Domain.Data.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<ulong>", b =>
                {
                    b.HasOne("ApiTools.Domain.Data.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiTools.Domain.Data.Account", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("BlogAccess");

                    b.Navigation("BlogPosts");

                    b.Navigation("Blogs");

                    b.Navigation("Emails");

                    b.Navigation("Invite");

                    b.Navigation("Invites");

                    b.Navigation("Posts");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("ApiTools.Domain.Data.Album", b =>
                {
                    b.Navigation("Likes");

                    b.Navigation("Pictures");
                });

            modelBuilder.Entity("ApiTools.Domain.Data.Blog", b =>
                {
                    b.Navigation("Posts");

                    b.Navigation("RoleAccess");

                    b.Navigation("UserAccess");
                });

            modelBuilder.Entity("ApiTools.Domain.Data.BlogPost", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("ApiTools.Domain.Data.Comment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("ApiTools.Domain.Data.Picture", b =>
                {
                    b.Navigation("Likes");
                });

            modelBuilder.Entity("ApiTools.Domain.Data.Role", b =>
                {
                    b.Navigation("BlogAccess");

                    b.Navigation("Members");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("ApiTools.Domain.Data.TimelinePost", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("Pictures");
                });
#pragma warning restore 612, 618
        }
    }
}
